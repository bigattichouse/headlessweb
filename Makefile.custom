# Custom Makefile for HeadlessWeb with Node.js Integration
# This supplements the CMake-generated Makefile

# Include CMake generated targets
include Makefile

# ========== Node.js Integration Targets ==========

# JavaScript package targets
.PHONY: js js-build js-test js-clean js-install js-publish js-examples js-docs
.PHONY: build-all test-all clean-all install-all

# Build Node.js bindings
js-build:
	@echo "Building Node.js bindings..."
	cd packages/js && npm run build

# Install Node.js dependencies
js-install:
	@echo "Installing Node.js dependencies..."
	cd packages/js && npm install

# Build everything (C++ + JavaScript)
js: hweb js-install js-build
	@echo "✅ JavaScript bindings built successfully"

# Run JavaScript tests
js-test: js
	@echo "Running JavaScript tests..."
	cd packages/js && npm test

# Run JavaScript examples
js-examples: js
	@echo "Running JavaScript examples..."
	node examples/js/basic-usage.js
	@echo "\nRunning testing suite example..."
	node examples/js/testing-suite.js

# Generate JavaScript documentation
js-docs: js
	@echo "Generating JavaScript documentation..."
	cd packages/js && npm run docs

# Clean JavaScript build artifacts
js-clean:
	@echo "Cleaning JavaScript build artifacts..."
	cd packages/js && npm run clean
	rm -rf packages/js/node_modules
	rm -rf packages/js/docs

# Publish JavaScript package (requires proper npm auth)
js-publish: js-test
	@echo "Publishing JavaScript package..."
	cd packages/js && npm publish

# ========== Combined Targets ==========

# Build everything
build-all: all js
	@echo "✅ Complete build finished (C++ + JavaScript)"

# Test everything
test-all: test js-test
	@echo "✅ All tests completed (C++ + JavaScript)"

# Clean everything
clean-all: clean js-clean
	@echo "✅ Complete cleanup finished"

# Install all dependencies
install-all: js-install
	@echo "✅ All dependencies installed"

# ========== Development Targets ==========

# Development setup
.PHONY: dev-setup dev-build dev-test dev-link

# Set up development environment
dev-setup:
	@echo "Setting up development environment..."
	@echo "Installing system dependencies..."
	sudo apt-get update && sudo apt-get install -y \
		build-essential cmake pkg-config \
		libgtk-4-dev libwebkitgtk-6.0-dev libjsoncpp-dev \
		libcairo2-dev libgdk-pixbuf2.0-dev libgtest-dev \
		nodejs npm
	@echo "Installing Node.js build tools..."
	npm install -g node-gyp
	$(MAKE) install-all

# Development build (faster iteration)
dev-build: hweb_core js-build
	@echo "✅ Development build complete"

# Development test (core tests only)
dev-test: dev-build
	@echo "Running core tests..."
	./tests/hweb_tests
	cd packages/js && npm run test:unit

# Link package for local development
dev-link: js
	@echo "Linking package for local development..."
	cd packages/js && npm link

# ========== Utility Targets ==========

.PHONY: check-deps version info demo

# Check system dependencies
check-deps:
	@echo "Checking system dependencies..."
	@which cmake > /dev/null || echo "❌ cmake not found"
	@which node > /dev/null || echo "❌ Node.js not found"
	@which npm > /dev/null || echo "❌ npm not found"
	@which node-gyp > /dev/null || echo "❌ node-gyp not found"
	@pkg-config --exists gtk4 || echo "❌ GTK4 not found"
	@pkg-config --exists webkit2gtk-6.0 || echo "❌ WebKitGTK 6.0 not found"
	@echo "✅ Dependency check complete"

# Show version information
version: js
	@echo "HeadlessWeb Version Information:"
	@echo "C++ Binary:"
	@./hweb --help | head -1 || echo "  (C++ binary not built)"
	@echo "JavaScript Package:"
	@cd packages/js && node -e "console.log('  @headlessweb/js v' + require('./package.json').version)"
	@echo "Node.js:"
	@node --version
	@echo "npm:"
	@npm --version

# Show project information
info:
	@echo "=== HeadlessWeb Project Information ==="
	@echo "Architecture: Monorepo with C++ core + Node.js bindings"
	@echo "C++ Framework: WebKitGTK 6.0 based browser automation"
	@echo "JavaScript Package: @headlessweb/js"
	@echo "Test Status: 629/629 tests passing (100%)"
	@echo ""
	@echo "Build Targets:"
	@echo "  make all         - Build C++ components"
	@echo "  make js          - Build JavaScript bindings"
	@echo "  make build-all   - Build everything"
	@echo "  make test-all    - Test everything"
	@echo "  make dev-setup   - Set up development environment"
	@echo ""
	@echo "Examples:"
	@echo "  make js-examples - Run JavaScript examples"
	@echo "  examples/js/     - JavaScript example files"

# Quick demo
demo: js
	@echo "=== HeadlessWeb JavaScript Demo ==="
	@echo "Running basic automation example..."
	@node -e "const { Browser } = require('./packages/js'); const browser = new Browser(); browser.navigate('https://example.com').then(() => console.log('Demo completed successfully!')).catch(console.error);"

# ========== Help ==========

.PHONY: help-js help-all

# JavaScript-specific help
help-js:
	@echo "HeadlessWeb JavaScript Targets:"
	@echo ""
	@echo "Building:"
	@echo "  js-install     Install Node.js dependencies"
	@echo "  js-build       Build Node.js bindings"
	@echo "  js             Build JavaScript package (install + build)"
	@echo ""
	@echo "Testing:"
	@echo "  js-test        Run JavaScript tests"
	@echo "  js-examples    Run JavaScript examples"
	@echo ""
	@echo "Documentation:"
	@echo "  js-docs        Generate JavaScript API documentation"
	@echo ""
	@echo "Maintenance:"
	@echo "  js-clean       Clean JavaScript build artifacts"
	@echo "  js-publish     Publish to npm (requires auth)"
	@echo ""
	@echo "Development:"
	@echo "  dev-setup      Set up complete development environment"
	@echo "  dev-build      Fast development build"
	@echo "  dev-test       Run core tests only"
	@echo "  dev-link       Link package for local development"
	@echo ""
	@echo "Combined:"
	@echo "  build-all      Build C++ + JavaScript"
	@echo "  test-all       Test C++ + JavaScript"
	@echo "  clean-all      Clean everything"

# Complete help
help-all: help help-js

# Default help override
help::
	@echo ""
	@echo "Additional JavaScript targets available - run 'make help-js' for details"